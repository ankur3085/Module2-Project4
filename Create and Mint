// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CustomToken {
    string public token_name;
    string public token_symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowed;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);

    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) {
        token_name = _name;
        token_symbol = _symbol;
        decimals = _decimals;
        totalSupply = _initialSupply * (10 ** uint256(decimals));
        balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function mint(address _to, uint256 value_transfer) public {
        require(_to != address(0), "Mint to the zero address");
        totalSupply += value_transfer;
        balances[_to] += value_transfer;
        emit Mint(_to, value_transfer);
        emit Transfer(address(0), _to, value_transfer);
    }

    function burn(address _from, uint256 value_transfer) public {
        require(_from != address(0), "Burn from the zero address");
        require(balances[_from] >= value_transfer, "Burn amount exceeds balance");
        balances[_from] -= value_transfer;
        totalSupply -= value_transfer;
        emit Burn(_from, value_transfer);
        emit Transfer(_from, address(0), value_transfer);
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Transfer to the zero address");
        require(balances[msg.sender] >= _value, "Transfer amount exceeds balance");

        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0), "Transfer to the zero address");
        require(balances[_from] >= _value, "Transfer amount exceeds balance");
        require(allowed[_from][msg.sender] >= _value, "Transfer amount exceeds allowance");

        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
}
